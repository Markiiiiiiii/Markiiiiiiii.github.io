{"meta":{"title":"老菜的菜单","subtitle":"记录点技术点滴","description":"","author":"Liuuuuuuuuu","url":"http://markiiiiiiii.github.io","root":"/"},"pages":[{"title":"分类","date":"2020-08-03T03:52:25.000Z","updated":"2020-08-03T03:56:00.368Z","comments":true,"path":"categories/index.html","permalink":"http://markiiiiiiii.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-08-03T03:56:56.000Z","updated":"2020-08-03T03:57:14.411Z","comments":true,"path":"tags/index.html","permalink":"http://markiiiiiiii.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Google虚拟机vps的本地化SSH登陆设置","slug":"Google虚拟机vps的本地化SSH登陆设置","date":"2020-08-11T00:50:51.000Z","updated":"2020-08-11T01:00:06.468Z","comments":true,"path":"2020/08/11/Google虚拟机vps的本地化SSH登陆设置/","link":"","permalink":"http://markiiiiiiii.github.io/2020/08/11/Google%E8%99%9A%E6%8B%9F%E6%9C%BAvps%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%8C%96SSH%E7%99%BB%E9%99%86%E8%AE%BE%E7%BD%AE/","excerpt":"","text":"Google cloud VPS 本地使用SSH登陆昨天发现google cloud上发现还有2K+的余额，正好最近在学习nginx的负载平衡，拿来做个vps来做nginx的服务器来实例化一下。vps做好后结果发现本地ssh登陆是要做一些小小的设置。 1234ssh-keygen -f googlekey #创建一个googlekey公私钥cat googlekey.pub#输出公钥 打开google cloud的元数据–ssh–修改–添加一项 将公钥输入保存 本地终端中输入： 12ssh -i googlekey username@ip#username这时是在元数据中显示的name","categories":[{"name":"运维","slug":"运维","permalink":"http://markiiiiiiii.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"Google","slug":"Google","permalink":"http://markiiiiiiii.github.io/tags/Google/"},{"name":"VPS","slug":"VPS","permalink":"http://markiiiiiiii.github.io/tags/VPS/"}]},{"title":"Pyspider+python-Wordpress-xmlrpc爬取自动发布","slug":"Pyspider-python-Wordpress-xmlrpc爬取自动发布","date":"2020-08-08T03:06:40.000Z","updated":"2020-08-08T03:11:58.806Z","comments":true,"path":"2020/08/08/Pyspider-python-Wordpress-xmlrpc爬取自动发布/","link":"","permalink":"http://markiiiiiiii.github.io/2020/08/08/Pyspider-python-Wordpress-xmlrpc%E7%88%AC%E5%8F%96%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83/","excerpt":"","text":"Pyspider+python-wordpress-xmlrpc 爬取站点自动发布Pyspider内代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#!&#x2F;usr&#x2F;bin&#x2F;env python# -*- encoding: utf-8 -*-# Created on 2020-08-07 01:19:41# Project: xxxxxxfrom pyspider.libs.base_handler import *import reDIR_PATH &#x3D; &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;mystaticsite&#x2F;downimages&#x2F;&#39;#coding:utf-8from wordpress_xmlrpc import Client, WordPressPostfrom wordpress_xmlrpc.methods.posts import GetPosts, NewPostfrom wordpress_xmlrpc.methods.users import GetUserInfofrom wordpress_xmlrpc.methods import postsfrom wordpress_xmlrpc.methods import taxonomiesfrom wordpress_xmlrpc import WordPressTermfrom wordpress_xmlrpc.compat import xmlrpc_clientfrom wordpress_xmlrpc.methods import media, posts#import importlib#importlib.reload(sys)#sys.setdefaultencoding(&#39;utf-8&#39;) #python3下不支持该用法class Handler(BaseHandler): crawl_config &#x3D; &#123; &#125; def __init__(self):#继承Deal类 self.deal &#x3D; Deal() @every(minutes&#x3D;24 * 60) def on_start(self): self.crawl(&#39;https:&#x2F;&#x2F;www.xxxxxx.com&#x2F;news&#x2F;index.html&#39;, callback&#x3D;self.index_page) @config(age&#x3D;10 * 24 * 60 * 60) def index_page(self, response): for each in response.doc(&#39;h3 &gt; a&#39;).items(): self.crawl(each.attr.href, callback&#x3D;self.detail_page) @config(priority&#x3D;2) def detail_page(self, response): title &#x3D; response.doc(&#39;h1&#39;).text(), tmp_text &#x3D; response.doc(&#39;.loadimg.fadeInUp &gt; p&#39;).text(), tmp_text &#x3D; &#39;&#39;.join(str(tmp_text)) #将元组数据转换为字符串 tmp_text &#x3D; tmp_text.replace(&quot;下面我们一起来看看她最新的番号作品吧！&quot;,&quot;&quot;) new_text &#x3D; tmp_text.replace(&quot;(&#39; &quot;,&quot;&quot;)#清洗掉原文中的标记 for each in response.doc(&#39;.loadimg.fadeInUp &gt; p &gt; img&#39;).items(): img_url &#x3D; each.attr.src if (&quot;xxxxxx&quot; in img_url): #过滤掉不在xxxxxx站点上的图片连接 split_url &#x3D; img_url.split(&#39;&#x2F;&#39;) dir_name &#x3D; split_url[-2] + &#39;&#x2F;&#39; dir_path &#x3D; self.deal.mkDir(dir_name) file_name &#x3D; split_url[-1] relativpath &#x3D; &#39;&lt;img src&#x3D;&quot;&#x2F;downimages&#x2F;&#39; + dir_name + file_name + &#39;&quot;&gt;&lt;br&gt;&#39;#构建图片显示的相对路径 new_text &#x3D; relativpath + new_text #将图片插入文章头部 self.crawl(img_url,callback&#x3D;self.save_img, save&#x3D;&#123;&#39;dir_path&#39;:dir_path ,&#39;file_name&#39;:file_name&#125;) title &#x3D; &#39;&#39;.join(str(title)) title &#x3D; title.replace(&quot;(&#39;&quot;,&quot;&quot;) title &#x3D; title.replace(&quot;&#39;,)&quot;,&quot;&quot;) wp &#x3D; Client(&#39;http:&#x2F;&#x2F;server&#x2F;xmlrpc.php&#39;, &#39;username&#39;, &#39;password&#39;) post &#x3D; WordPressPost() post.title &#x3D; title post.content &#x3D; new_text post.post_status &#x3D; &#39;publish&#39; post.id &#x3D; wp.call(posts.NewPost(post)) #print(&quot;爬取注入:&quot;+ post.id + &quot;post.title&quot;) def save_img(self,response): #保存图片 content &#x3D; response.content dir_path &#x3D; response.save[&#39;dir_path&#39;] file_name &#x3D; response.save[&#39;file_name&#39;] file_path &#x3D; dir_path + &#39;&#x2F;&#39; + file_name self.deal.saveImg(content,file_path) import osclass Deal: def __init__(self): self.path &#x3D; DIR_PATH if not self.path.endswith(&#39;&#x2F;&#39;): self.path &#x3D; self.path + &#39;&#x2F;&#39; if not os.path.exists(self.path): os.makedirs(self.path) def mkDir(self, path): path &#x3D; path.strip() dir_path &#x3D; self.path + path exists &#x3D; os.path.exists(dir_path) if not exists: os.makedirs(dir_path) return dir_path else: return dir_path def saveImg(self, content, path): f &#x3D; open(path, &#39;wb&#39;) f.write(content) f.close() def saveBrief(self, content, dir_path, name): file_name &#x3D; dir_path + &quot;&#x2F;&quot; + name + &quot;.txt&quot; f &#x3D; open(file_name, &quot;w+&quot;) f.write(content.encode(&#39;utf-8&#39;)) def getExtension(self, url): extension &#x3D; url.split(&#39;.&#39;)[-1] return extension# return &#123;# &quot;title&quot;: title,# &quot;contenttext&quot;: contenttext,# # &#125;","categories":[{"name":"编程","slug":"编程","permalink":"http://markiiiiiiii.github.io/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"pyspider","slug":"pyspider","permalink":"http://markiiiiiiii.github.io/tags/pyspider/"},{"name":"wordpress","slug":"wordpress","permalink":"http://markiiiiiiii.github.io/tags/wordpress/"}]},{"title":"高负载web站点设计 (一)","slug":"高负载web站点设计","date":"2020-08-05T06:08:38.000Z","updated":"2020-08-05T06:28:04.636Z","comments":true,"path":"2020/08/05/高负载web站点设计/","link":"","permalink":"http://markiiiiiiii.github.io/2020/08/05/%E9%AB%98%E8%B4%9F%E8%BD%BDweb%E7%AB%99%E7%82%B9%E8%AE%BE%E8%AE%A1/","excerpt":"","text":"A.负载平衡服务器 A.1. ngnix反向代理服务根据B服务组的最短时间或负载来自动均衡。 B.静态页面服务器集群b.1. nginx WEB业务集群 使用rsync服务同步C.1.服务器生成的静态页面和相关的静态资源。（扩展思路：将GIF，JPG等静态资源单独使用dfs服务器分流） C.内网动态服务器c.1. Wordpress内容生产服务器 wordpress服务器使用wp2static插件生成静态页面，wp2static插件可以识别之前生成的页面从而减少服务器负载。 wordpress服务器使用inonifywait脚本监控wp2static插件生成的静态页面目录，如果产生文件的变更（创建、删除、修改、移动）和目录结构的变更后，则通过rsync服务器同步远程服务器。 c.2. Pyspider爬虫服务器 Pyspider爬虫框架爬取需要的数据 安装python-wordpress-xmlrpc库， 使用wordpress的rpc服务接受Pyspider爬取经过清洗后的数据发布到wordpress服务器。","categories":[{"name":"运维","slug":"运维","permalink":"http://markiiiiiiii.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://markiiiiiiii.github.io/tags/Ubuntu/"},{"name":"nginx","slug":"nginx","permalink":"http://markiiiiiiii.github.io/tags/nginx/"}]},{"title":"rsync+inofity内网向外网同步数据(一)","slug":"rsync-inofity内网向外网同步数据","date":"2020-08-03T03:22:53.000Z","updated":"2020-08-03T06:24:54.716Z","comments":true,"path":"2020/08/03/rsync-inofity内网向外网同步数据/","link":"","permalink":"http://markiiiiiiii.github.io/2020/08/03/rsync-inofity%E5%86%85%E7%BD%91%E5%90%91%E5%A4%96%E7%BD%91%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE/","excerpt":"","text":"设计要求 内网web服务器生成html页面 内网向外网同步生成的html页面和目录 外网服务器纯静态资源访问 系统环境 内网 Ubuntu 20.x + Ngnix + PHP + Mysql + Wordpress 外网 Ubuntu 20.x + Ngnix 外网服务器配置外网服务器必须提供rsync –daemon服务以监听内网服务器发出的同步指令 12345678910111213141516171819202122232425[123] comment &#x3D; 123 static html files server path &#x3D; &#x2F;var&#x2F;www&#x2F;staichtml&#x2F; use chroot &#x3D; no max connections&#x3D;20 lock file &#x3D; &#x2F;var&#x2F;lock&#x2F;rsyncd read only &#x3D; no write only &#x3D; no list &#x3D; yes uid &#x3D; rsync gid &#x3D; rsync auth users &#x3D; rsync_clint secrets file &#x3D; &#x2F;etc&#x2F;rsyncd.secrets strict modes &#x3D; yes port&#x3D;873 pid file &#x3D; &#x2F;var&#x2F;run&#x2F;rsyncd.pid log file &#x3D; &#x2F;var&#x2F;log&#x2F;rsyncd.log log format &#x3D; %t %a %m %f %b ignore errors &#x3D; yes ignore nonreadable &#x3D; yes transfer logging &#x3D; yes timeout &#x3D; 600 refuse options &#x3D; checksum dry-run dont compress &#x3D; *.gz *.tgz *.zip *.z *.rpm *.deb *.iso *.bz2 *.tbz 创建 /etc/rsyncd.secrets 并 chmod 600 权限 1rsync_clint:密码123 添加一个系统用户为rsync的用户 该用户不具备登录权限 &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;useradd -s &amp;#x2F;sbin&amp;#x2F;nologin -M rsync&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt; ！！！注意！！！必须 chmod 777 /var/www/staichtml/ 在实际操作中发现没有x权限rsync服务无法写入文件 内网服务器配置略过相关web服务配置创建 /etc/rsyncd.secrets 并 chmod 600 权限，仅存放密码使用 1密码123 安装apt install inofity-tool 编写简单实现的.sh文件并 chmod +x xxxx.sh 12345678910#!&#x2F;bin&#x2F;bashsrc&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;mystaticsite&#x2F; #同步目录路径ip&#x3D;111.111.111.111&#x2F;usr&#x2F;bin&#x2F;inotifywait -rm --timefmt &#39;%d&#x2F;%m&#x2F;%y %H:%M&#39; --format &#39;%T %w%f%e&#39; -e modify,delete,create,attrib,move $src | while read file do rsync -avz --delete --progress $src rsync_clint@$ip::123 --password-file&#x3D;&#x2F;etc&#x2F;rsyncd.secrets echo &quot;$&#123;file&#125; was rsynced&quot; &gt;&gt; &#x2F;tmp&#x2F;rsync.log 2&gt;&amp;1 done 123！！！注意！！！必须将$src的位置写在连接之前不能放在连接之后，不然外网服务器无法接受到文件。这一点与网上很多教程向左，卡了我两天多的时间才发现的:(","categories":[{"name":"运维","slug":"运维","permalink":"http://markiiiiiiii.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://markiiiiiiii.github.io/tags/Ubuntu/"},{"name":"rsync","slug":"rsync","permalink":"http://markiiiiiiii.github.io/tags/rsync/"},{"name":"inotify","slug":"inotify","permalink":"http://markiiiiiiii.github.io/tags/inotify/"}]},{"title":"rsync同步基本配置（基础知识）","slug":"rsync同步基本配置（基础知识）","date":"2020-08-03T02:04:38.000Z","updated":"2020-08-03T03:58:21.709Z","comments":true,"path":"2020/08/03/rsync同步基本配置（基础知识）/","link":"","permalink":"http://markiiiiiiii.github.io/2020/08/03/rsync%E5%90%8C%E6%AD%A5%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%EF%BC%88%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/","excerpt":"","text":"rrsync同步基本配置（基础知识）Ubuntu 20.x 环境服务器端：1234567891011121314151617181920[123] comment &#x3D; 123 static html files serverpath &#x3D; &#x2F;var&#x2F;www&#x2F;html&#x2F;siteuse chroot &#x3D; nomax connections&#x3D;20lock file &#x3D; &#x2F;var&#x2F;lock&#x2F;rsyncdread only &#x3D; yeslist &#x3D; yesuid &#x3D; 0gid &#x3D; 0 auth users &#x3D; 123clint secrets file &#x3D; &#x2F;etc&#x2F;rsyncd.secrets strict modes &#x3D; yes port&#x3D;873ignore errors &#x3D; yesignore nonreadable &#x3D; yestransfer logging &#x3D; yestimeout &#x3D; 600refuse options &#x3D; checksum dry-rundont compress &#x3D; *.gz *.tgz *.zip *.z *.rpm *.deb *.iso *.bz2 *.tbz 增加/etc/rsyncd.secrets文件 1123clint：密码123456 启动服务器： 1&#x2F;etc&#x2F;init.d&#x2F;rsync --daemon 客户端：增加/etc/rsyncd.secrets文件 1密码123456 客户端连接服务器命令 1rsync -vzrtopg --delete --progress 123clint@服务器地址::123 &#x2F;var&#x2F;www&#x2F;staichtml（客户端备份目录位置） --password-file&#x3D;&#x2F;etc&#x2F;rsyncd.secrets 注意客户端和服务器端的rsyncd.secrets 文件均需要chmod 600 权限 1chmod 600 rsyncd.secrets","categories":[{"name":"运维","slug":"运维","permalink":"http://markiiiiiiii.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://markiiiiiiii.github.io/tags/Ubuntu/"},{"name":"rsync","slug":"rsync","permalink":"http://markiiiiiiii.github.io/tags/rsync/"}]}],"categories":[{"name":"运维","slug":"运维","permalink":"http://markiiiiiiii.github.io/categories/%E8%BF%90%E7%BB%B4/"},{"name":"编程","slug":"编程","permalink":"http://markiiiiiiii.github.io/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"Google","slug":"Google","permalink":"http://markiiiiiiii.github.io/tags/Google/"},{"name":"VPS","slug":"VPS","permalink":"http://markiiiiiiii.github.io/tags/VPS/"},{"name":"pyspider","slug":"pyspider","permalink":"http://markiiiiiiii.github.io/tags/pyspider/"},{"name":"wordpress","slug":"wordpress","permalink":"http://markiiiiiiii.github.io/tags/wordpress/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://markiiiiiiii.github.io/tags/Ubuntu/"},{"name":"nginx","slug":"nginx","permalink":"http://markiiiiiiii.github.io/tags/nginx/"},{"name":"rsync","slug":"rsync","permalink":"http://markiiiiiiii.github.io/tags/rsync/"},{"name":"inotify","slug":"inotify","permalink":"http://markiiiiiiii.github.io/tags/inotify/"}]}